const expect = require('chai').expect;
const sinon = require('sinon');
const mongoose = require('mongoose');

const User = require('../models/user');
const authController = require('../controllers/auth');

describe('Auth Controller', function(){
    before(function(done){ //'before' is a lifecycle hook given by 'Mocha'
        // gets call only once before all the 'it' statements
        //there are many other methods like 'beforeEach','after','afterEach'
        //'beforeEach' gets call before every 'it' statements
        //'after' gets call after all 'it' statements
        //'afterEach' gets call after every 'it' statements
        mongoose
        .connect(
            'mongodb://MongoDB_User:MongoDBUser%40210791@node-complete-shard-00-00.0vl9o.mongodb.net:27017,node-complete-shard-00-01.0vl9o.mongodb.net:27017,node-complete-shard-00-02.0vl9o.mongodb.net:27017/test-messages?ssl=true&replicaSet=atlas-13wbgl-shard-0&authSource=admin&retryWrites=true&w=majority'
        )
        .then(result => {
            const user = new User({
                email: 'testuser@test.com',
                password: 'TestPassword',
                name: 'TestUser',
                posts: [],
                _id: '6179262f69fee595ddae3074'
            });

            return user.save();
        })
        .then(() => {
            done();
        })
        .catch(done)
    })

    it('should throw error with code 500 if accessing the database fails', function(done){
        // 'argument 'done' above tells mocha to wait 'done' to get execute manually from code before
        // passing/failing the test case

        sinon.stub(User, 'findOne');
        User.findOne.throws(); // 'throws' here is generated by 'sinon.stub'

        const req = {
            body: {
                email: 'testuser@test.com',
                password: 'TestPassword'
            }
        };

        authController.login(req, {}, () => {}).then(result => {
            expect(result).to.be.an('error');
            expect(result).to.have.property('statusCode', 500);
            done();
        }).catch(done);

        User.findOne.restore();
    });

    it('should send response with valid user status for existing user', function(done){
        
        const req = { userId: '6179262f69fee595ddae3074'};
        const res = {
            statusCode: 500,
            userStatus: 'I am new!',
            status: function(code){
                this.statusCode = code;
            },
            json: function(data){
                this.userStatus = data.status
            }
        };

        authController.getUserStatus(req, res, () => {}).then(() => {
            expect(res.statusCode).to.be.equal(200);
            expect(res.userStatus).to.be.equal('I am new!');
            done();
        }).catch(done);
    });

    after(function(done){ //lifecycle hook by 'Mocha'
        User.deleteMany({})
            .then(() => {
                return mongoose.disconnect();
            })
            .then(() => {
                done();
            })
            .catch(done)
    })
})